#!/usr/bin/env perl

use Modern::Perl;
use Test::More;
use IO::Socket::INET;

my $DEBUG = 0;
my $testrun = int(rand(100000)) . "~" . time;

print "Test run: $testrun\n";

# for now we'll assume M3MTA is already running
sub get_socket {
	my $sock = IO::Socket::INET->new(
		PeerPort => 'smtp(25)',
		PeerAddr => 'localhost',
		Proto	 => 'tcp',
	) or die("Can't connect: $@\n");

	return $sock;
}

my $sock = get_socket;
my $state = 'BEGIN';
my $buffer = '';
my $host = '';
while(my $data = <$sock>) {
	$buffer .= $data;
	while(my ($line) = $buffer =~ /^([^\r\n]*)\r?\n/s) {
		$buffer =~ s/^[^\r\n]*\r?\n(.*)/$1/s;
		$DEBUG && print "[RECD] $line\n";
		if($state eq 'BEGIN') {
			like($line, qr/^220\s[^\s]+\sM3MTA$/, "Server greeting");
			($host) = $line =~ /^220\s([^\s]+)\sM3MTA$/;
			print $sock "HELO localhost\r\n";
			$state = 'HELO';
			next;
		} elsif ($state eq 'HELO') {
			like($line, qr/^250\sHello\s\'localhost\'.\sI\'m\sM3MTA$/, "HELO response");
			print $sock "MAIL FROM:<>\r\n";
			$state = 'MAIL';
			next;
		} elsif ($state eq 'MAIL') {
			like($line, qr/^250\s\ssender\sok$/, "MAIL response");
			print $sock "RCPT TO:<postmaster\@$host>\r\n";
			$state = 'RCPT';
			next;
		} elsif ($state eq 'RCPT') {
			like($line, qr/^250\spostmaster\@$host\srecipient\sok$/, "RCPT response");
			print $sock "DATA\r\n";
			$state = 'DATA';
			next;
		} elsif ($state eq 'DATA') {
			like($line, qr/^354\sSend\smail,\send\swith\s\"\.\"\son\sline\sby\sitself$/, "DATA response");
			print $sock "To: <postmaster\@$host>\r\nMessage-Id: test\@$host\r\nSubject: Automated test message (run $testrun)\r\nFrom: Automated Test <automated\@m3.mta>\r\nDate: Tue 01 Jan 2013 00:00:00 +0000\r\n\r\nMessage generated by automated test suite.\r\n\r\n.\r\n";
			$state = 'DONE';
			next;
		} elsif ($state eq 'DONE') {
			like($line, qr/^250\s[^\@]+\@$host\smessage\saccepted\sfor\sdelivery$/, "Message accepted");
			print $sock "QUIT\r\n";
			$state = 'QUIT';
			next;
		} elsif ($state eq 'QUIT') {
			like($line, qr/^221\sBye\.$/, 'QUIT response');
		}
	}
}
ok(1, 'Socket was closed after QUIT');


done_testing();
